generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updateAt     DateTime   @updatedAt
  username     String     @unique
  email        String     @unique
  phone        String     @unique
  password     String
  firstName    String?
  lastName     String?
  avatar       String?
  isOnVacation Boolean?   @default(false)
  vacation     Vacation[] @relation(name: "Vacation")
  salary       Salary[]
  ownCompany   Company[]  @relation(name: "OwnedBy")
  isManage     Company[]  @relation(name: "Manager")
  myCompany    Company[]  @relation(name: "Worker")
}

model Salary {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  updateAt            DateTime @updatedAt
  preTaxMonthlySalary Int?
  familyCount         Int?
  childCount          Int?
  company             Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  companyId           Int
  userId              Int
}

model Vacation {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime       @default(now())
  updateAt           DateTime       @updatedAt
  joinCompanyDate    String
  annual             Float
  other              Float          @default(0)
  restAnnualVacation Float          @default(0)
  restOtherVacation  Float          @default(0)
  totalVacation      Float
  appearence         Int            @default(0)
  description        VacationDesc[]
  company            Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user               User           @relation(name: "Vacation", fields: [userId], references: [id])

  companyId Int
  userId    Int
}

enum TVacation {
  ANNUAL
  SICK
  HALF
  OTHER
  OTHERSICK
  NONPAID
}

model VacationDesc {
  id           Int       @id @default(autoincrement())
  createdAt    DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  vacationType TVacation
  day          Float     @default(1)
  description  String
  Vacation     Vacation? @relation(fields: [vacationId], references: [id], onDelete: Cascade)
  vacationId   Int?
}

model Company {
  id                Int            @id @default(autoincrement())
  createdAt         DateTime       @default(now())
  updateAt          DateTime       @updatedAt
  companyLogo       String?
  companyName       String         @unique
  companyOwner      User           @relation(name: "OwnedBy", fields: [userId], references: [id], onDelete: Cascade)
  companyManager    User[]         @relation(name: "Manager")
  worker            User[]         @relation(name: "Worker")
  connectedCompany  Company[]      @relation("connectComapny") // 거래처
  connectingCompany Company[]      @relation("connectComapny") // 거래처
  companyAdress     CompanyAdress?
  companyProduct    Product[] // 회사 상품
  inNout            InNout? // 회계
  userId            Int
  Vacation          Vacation[]
  Salary            Salary[]
}

model CompanyAdress {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
  companyName  String   @unique
  country      String?
  city         String?
  streetAdress String?
  restAdress   String?
  adressNum    String?
  Company      Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int?     @unique
}

// income model expend model 만들기
model Product {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  updateAt      DateTime       @updatedAt
  company       Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  itemProductId String
  itemName      String // 제품이름
  itemModelName String? // 제품 모델명
  itemPhoto     String?
  itemType      String? // 제품 타입
  itemCount     Int?
  itemPrice     Int?
  itemDesc      String?
  incomeExpend  IncomeExpend[]
  companyId     Int
}

model InNout {
  id          Int                 @id @default(autoincrement())
  createdAt   DateTime            @default(now())
  updateAt    DateTime            @updatedAt
  accountNum  String?             @unique // 거래계좌번호
  accountName String // 계좌별명
  accountDesc String?
  totalAssets EquityLiabilities[] // 자산 및 부채
  budget      Int                 @default(0) // 예산
  inNoutDesc  IncomeExpend[]      @relation(name: "InEx") // budget의 토대
  Company     Company?            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   Int?                @unique
}

// Equity and Liabilities
model EquityLiabilities {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  enLId     String   @unique
  enLName   String // 자산 제목
  enLType   String // 자산 유형
  enLDesc   String? // 자산 설명
  current   Boolean  @default(true) // 유동 / 비유동
  assests   Boolean  @default(true) // 자산 / 부채
  value     Int // 자산값
  InNout    InNout?  @relation(fields: [inNoutId], references: [id], onDelete: Cascade)
  inNoutId  Int?
}

enum TPaymentSwitch {
  WAIT
  PAID
  NONPAID
}

model IncomeExpend {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  productItem  Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  incomeTrue   Boolean?       @default(true) //수입지출타입
  infoSubtitle String         @unique
  money        Int? // 수익지출금
  businessDate String? // 거래일
  paymentType  String? // 결제타입
  accountCode  String? // 계정과목
  businessDesc String? // 거래내용
  paymentsDone TPaymentSwitch @default(WAIT) // 결제완료
  InNout       InNout?        @relation(name: "InEx", fields: [inNoutId], references: [id], onDelete: Cascade)
  inNoutId     Int?
  productId    Int?
}
